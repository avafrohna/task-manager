{"ast":null,"code":"const API_BASE_URL = 'https://0b5ff8b0.uqcloud.net/api';\nconst JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic3R1ZGVudCIsInVzZXJuYW1lIjoiczQ5MDA1MzQifQ.7GTR79tbb2Nk1o2mZKdpBqpbuHScsUhEFws7hMkYLvA';\nconst USERNAME = 's4900534';\n\n/**\n * Helper function to make API requests.\n * It automatically includes the Authorization header and any request body.\n *\n * @param {string} endpoint - The API endpoint to call.\n * @param {string} [method='GET'] - The HTTP method to use (GET, POST, PATCH, etc.).\n * @param {object} [body=null] - The request body to send (for POST/PATCH requests).\n * @returns {Promise<object>} - The JSON response from the API.\n */\nasync function apiRequest(endpoint, method = 'GET', body = null) {\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${JWT_TOKEN}`\n    }\n  };\n  if (method === 'POST' || method === 'PATCH') {\n    options.headers['Prefer'] = 'return=representation';\n  }\n  if (body) {\n    const requestBody = {\n      ...body,\n      username: USERNAME\n    };\n    options.body = JSON.stringify(requestBody);\n  }\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, options);\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  if (response.status === 204) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Fetch all projects.\n * @returns {Promise<Array>} - Returns an array of project objects.\n */\nexport async function getProjects() {\n  try {\n    const response = await apiRequest('/project');\n    return response;\n  } catch (error) {\n    console.error(\"Error in getProjects: \", error);\n  }\n}\n\n/**\n * Fetch a single project by ID.\n * @param {string} id - The project ID.\n * @returns {Promise<object>} - Returns a single project object.\n */\nexport async function getProject(id) {\n  return await apiRequest(`/project?id=eq.${id}`);\n}\n\n/**\n * Create a new project.\n * @param {object} project - The project details.\n * @returns {Promise<object>} - The created project object.\n */\nexport async function createProject(project) {\n  return apiRequest('/project', 'POST', project);\n}\n\n/**\n * Update a project.\n * @param {string} id - The project ID.\n * @param {object} updates - The project fields to update.\n * @returns {Promise<object>} - The updated project object.\n */\nexport async function updateProject(id, updates) {\n  try {\n    await apiRequest(`/project?id=eq.${id}`, 'PATCH', updates);\n  } catch (error) {\n    console.error(`Error updating project with ID ${id}: `, error);\n  }\n}\n\n/**\n * Delete a project.\n * @param {string} id - The project ID.\n * @returns {Promise<void>}\n */\nexport async function deleteProject(id) {\n  try {\n    await apiRequest(`/project?id=eq.${id}`, 'DELETE');\n  } catch (error) {\n    console.error(`Error deleting project with ID ${id}: `, error);\n  }\n}","map":{"version":3,"names":["API_BASE_URL","JWT_TOKEN","USERNAME","apiRequest","endpoint","method","body","options","headers","requestBody","username","JSON","stringify","response","fetch","ok","Error","status","json","getProjects","error","console","getProject","id","createProject","project","updateProject","updates","deleteProject"],"sources":["/Users/avafrohna/Code/cloudcomputing/scalable-map/src/api.js"],"sourcesContent":["const API_BASE_URL = 'https://0b5ff8b0.uqcloud.net/api';\nconst JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoic3R1ZGVudCIsInVzZXJuYW1lIjoiczQ5MDA1MzQifQ.7GTR79tbb2Nk1o2mZKdpBqpbuHScsUhEFws7hMkYLvA';\nconst USERNAME = 's4900534';\n\n/**\n * Helper function to make API requests.\n * It automatically includes the Authorization header and any request body.\n *\n * @param {string} endpoint - The API endpoint to call.\n * @param {string} [method='GET'] - The HTTP method to use (GET, POST, PATCH, etc.).\n * @param {object} [body=null] - The request body to send (for POST/PATCH requests).\n * @returns {Promise<object>} - The JSON response from the API.\n */\nasync function apiRequest(endpoint, method = 'GET', body = null) {\n  const options = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${JWT_TOKEN}`,\n    },\n  };\n\n  if (method === 'POST' || method === 'PATCH') {\n    options.headers['Prefer'] = 'return=representation';\n  }\n\n  if (body) {\n    const requestBody = { \n      ...body, \n      username: USERNAME\n    };\n    options.body = JSON.stringify(requestBody);\n  }\n\n  const response = await fetch(`${API_BASE_URL}${endpoint}`, options);\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  if (response.status === 204) {\n    return null;\n  }\n\n  return response.json(); \n}\n\n/**\n * Fetch all projects.\n * @returns {Promise<Array>} - Returns an array of project objects.\n */\nexport async function getProjects() {\n  try {\n    const response = await apiRequest('/project');\n    return response;\n  } \n  catch (error) {\n    console.error(\"Error in getProjects: \", error);\n  }\n}\n\n/**\n * Fetch a single project by ID.\n * @param {string} id - The project ID.\n * @returns {Promise<object>} - Returns a single project object.\n */\nexport async function getProject(id) {\n  return await apiRequest(`/project?id=eq.${id}`);\n}\n\n/**\n * Create a new project.\n * @param {object} project - The project details.\n * @returns {Promise<object>} - The created project object.\n */\nexport async function createProject(project) {\n  return apiRequest('/project', 'POST', project);\n}\n\n/**\n * Update a project.\n * @param {string} id - The project ID.\n * @param {object} updates - The project fields to update.\n * @returns {Promise<object>} - The updated project object.\n */\nexport async function updateProject(id, updates) {\n  try {\n    await apiRequest(`/project?id=eq.${id}`, 'PATCH', updates);\n  } \n  catch (error) {\n    console.error(`Error updating project with ID ${id}: `, error);\n  }\n}\n\n/**\n * Delete a project.\n * @param {string} id - The project ID.\n * @returns {Promise<void>}\n */\nexport async function deleteProject(id) {\n  try {\n    await apiRequest(`/project?id=eq.${id}`, 'DELETE');\n  } \n  catch (error) {\n    console.error(`Error deleting project with ID ${id}: `, error);\n  }\n}\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,kCAAkC;AACvD,MAAMC,SAAS,GAAG,yIAAyI;AAC3J,MAAMC,QAAQ,GAAG,UAAU;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,UAAUA,CAACC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAE;EAC/D,MAAMC,OAAO,GAAG;IACdF,MAAM;IACNG,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUP,SAAS;IACtC;EACF,CAAC;EAED,IAAII,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,OAAO,EAAE;IAC3CE,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC,GAAG,uBAAuB;EACrD;EAEA,IAAIF,IAAI,EAAE;IACR,MAAMG,WAAW,GAAG;MAClB,GAAGH,IAAI;MACPI,QAAQ,EAAER;IACZ,CAAC;IACDK,OAAO,CAACD,IAAI,GAAGK,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC;EAC5C;EAEA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,YAAY,GAAGI,QAAQ,EAAE,EAAEG,OAAO,CAAC;EAEnE,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;EAC3D;EACA,IAAIJ,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;IAC3B,OAAO,IAAI;EACb;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMV,UAAU,CAAC,UAAU,CAAC;IAC7C,OAAOU,QAAQ;EACjB,CAAC,CACD,OAAOO,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeE,UAAUA,CAACC,EAAE,EAAE;EACnC,OAAO,MAAMpB,UAAU,CAAC,kBAAkBoB,EAAE,EAAE,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,aAAaA,CAACC,OAAO,EAAE;EAC3C,OAAOtB,UAAU,CAAC,UAAU,EAAE,MAAM,EAAEsB,OAAO,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,aAAaA,CAACH,EAAE,EAAEI,OAAO,EAAE;EAC/C,IAAI;IACF,MAAMxB,UAAU,CAAC,kBAAkBoB,EAAE,EAAE,EAAE,OAAO,EAAEI,OAAO,CAAC;EAC5D,CAAC,CACD,OAAOP,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkCG,EAAE,IAAI,EAAEH,KAAK,CAAC;EAChE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeQ,aAAaA,CAACL,EAAE,EAAE;EACtC,IAAI;IACF,MAAMpB,UAAU,CAAC,kBAAkBoB,EAAE,EAAE,EAAE,QAAQ,CAAC;EACpD,CAAC,CACD,OAAOH,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkCG,EAAE,IAAI,EAAEH,KAAK,CAAC;EAChE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}